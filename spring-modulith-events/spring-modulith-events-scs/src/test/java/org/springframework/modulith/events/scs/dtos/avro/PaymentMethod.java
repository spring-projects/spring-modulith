/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.springframework.modulith.events.scs.dtos.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class PaymentMethod extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {

    private static final long serialVersionUID = -3545422545868948468L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
            "{\"type\":\"record\",\"name\":\"PaymentMethod\",\"namespace\":\"org.springframework.modulith.events.scs.dtos.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentMethodType\",\"symbols\":[\"VISA\",\"MASTERCARD\"]}},{\"name\":\"cardNumber\",\"type\":\"string\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<PaymentMethod> ENCODER = new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<PaymentMethod> DECODER = new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<PaymentMethod> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<PaymentMethod> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified
     * {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given
     * SchemaStore
     */
    public static BinaryMessageDecoder<PaymentMethod> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this PaymentMethod to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a PaymentMethod from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a PaymentMethod instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an
     * instance of this class
     */
    public static PaymentMethod fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private int id;

    private PaymentMethodType type;

    private CharSequence cardNumber;

    /**
     * Default constructor. Note that this does not initialize fields to their default
     * values from the schema. If that is desired then one should use
     * <code>newBuilder()</code>.
     */
    public PaymentMethod() {
    }

    /**
     * All-args constructor.
     * @param id The new value for id
     * @param type The new value for type
     * @param cardNumber The new value for cardNumber
     */
    public PaymentMethod(Integer id, PaymentMethodType type,
            CharSequence cardNumber) {
        this.id = id;
        this.type = type;
        this.cardNumber = cardNumber;
    }

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return type;
            case 2:
                return cardNumber;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                id = (Integer) value$;
                break;
            case 1:
                type = (PaymentMethodType) value$;
                break;
            case 2:
                cardNumber = (CharSequence) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(int value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'type' field.
     * @return The value of the 'type' field.
     */
    public PaymentMethodType getType() {
        return type;
    }

    /**
     * Sets the value of the 'type' field.
     * @param value the value to set.
     */
    public void setType(PaymentMethodType value) {
        this.type = value;
    }

    /**
     * Gets the value of the 'cardNumber' field.
     * @return The value of the 'cardNumber' field.
     */
    public CharSequence getCardNumber() {
        return cardNumber;
    }

    /**
     * Sets the value of the 'cardNumber' field.
     * @param value the value to set.
     */
    public void setCardNumber(CharSequence value) {
        this.cardNumber = value;
    }

    /**
     * Creates a new PaymentMethod RecordBuilder.
     * @return A new PaymentMethod RecordBuilder
     */
    public static PaymentMethod.Builder newBuilder() {
        return new PaymentMethod.Builder();
    }

    /**
     * Creates a new PaymentMethod RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new PaymentMethod RecordBuilder
     */
    public static PaymentMethod.Builder newBuilder(
            PaymentMethod.Builder other) {
        if (other == null) {
            return new PaymentMethod.Builder();
        }
        else {
            return new PaymentMethod.Builder(other);
        }
    }

    /**
     * Creates a new PaymentMethod RecordBuilder by copying an existing PaymentMethod
     * instance.
     * @param other The existing instance to copy.
     * @return A new PaymentMethod RecordBuilder
     */
    public static PaymentMethod.Builder newBuilder(
            PaymentMethod other) {
        if (other == null) {
            return new PaymentMethod.Builder();
        }
        else {
            return new PaymentMethod.Builder(other);
        }
    }

    /**
     * RecordBuilder for PaymentMethod instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentMethod>
            implements org.apache.avro.data.RecordBuilder<PaymentMethod> {

        private int id;

        private PaymentMethodType type;

        private CharSequence cardNumber;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(PaymentMethod.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.type)) {
                this.type = data().deepCopy(fields()[1].schema(), other.type);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.cardNumber)) {
                this.cardNumber = data().deepCopy(fields()[2].schema(), other.cardNumber);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
        }

        /**
         * Creates a Builder by copying an existing PaymentMethod instance
         * @param other The existing instance to copy.
         */
        private Builder(PaymentMethod other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.type)) {
                this.type = data().deepCopy(fields()[1].schema(), other.type);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.cardNumber)) {
                this.cardNumber = data().deepCopy(fields()[2].schema(), other.cardNumber);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public int getId() {
            return id;
        }

        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public PaymentMethod.Builder setId(int value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public PaymentMethod.Builder clearId() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'type' field.
         * @return The value.
         */
        public PaymentMethodType getType() {
            return type;
        }

        /**
         * Sets the value of the 'type' field.
         * @param value The value of 'type'.
         * @return This builder.
         */
        public PaymentMethod.Builder setType(
                PaymentMethodType value) {
            validate(fields()[1], value);
            this.type = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'type' field has been set.
         * @return True if the 'type' field has been set, false otherwise.
         */
        public boolean hasType() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'type' field.
         * @return This builder.
         */
        public PaymentMethod.Builder clearType() {
            type = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'cardNumber' field.
         * @return The value.
         */
        public CharSequence getCardNumber() {
            return cardNumber;
        }

        /**
         * Sets the value of the 'cardNumber' field.
         * @param value The value of 'cardNumber'.
         * @return This builder.
         */
        public PaymentMethod.Builder setCardNumber(CharSequence value) {
            validate(fields()[2], value);
            this.cardNumber = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'cardNumber' field has been set.
         * @return True if the 'cardNumber' field has been set, false otherwise.
         */
        public boolean hasCardNumber() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'cardNumber' field.
         * @return This builder.
         */
        public PaymentMethod.Builder clearCardNumber() {
            cardNumber = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public PaymentMethod build() {
            try {
                PaymentMethod record = new PaymentMethod();
                record.id = fieldSetFlags()[0] ? this.id : (Integer) defaultValue(fields()[0]);
                record.type = fieldSetFlags()[1] ? this.type
                        : (PaymentMethodType) defaultValue(fields()[1]);
                record.cardNumber = fieldSetFlags()[2] ? this.cardNumber : (CharSequence) defaultValue(fields()[2]);
                return record;
            }
            catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            }
            catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }

    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<PaymentMethod> WRITER$ = (org.apache.avro.io.DatumWriter<PaymentMethod>) MODEL$
        .createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<PaymentMethod> READER$ = (org.apache.avro.io.DatumReader<PaymentMethod>) MODEL$
        .createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
        out.writeInt(this.id);

        out.writeEnum(this.type.ordinal());

        out.writeString(this.cardNumber);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.id = in.readInt();

            this.type = PaymentMethodType.values()[in.readEnum()];

            this.cardNumber = in.readString(this.cardNumber instanceof Utf8 ? (Utf8) this.cardNumber : null);

        }
        else {
            for (int i = 0; i < 3; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.id = in.readInt();
                        break;

                    case 1:
                        this.type = PaymentMethodType.values()[in
                            .readEnum()];
                        break;

                    case 2:
                        this.cardNumber = in
                            .readString(this.cardNumber instanceof Utf8 ? (Utf8) this.cardNumber : null);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

}
