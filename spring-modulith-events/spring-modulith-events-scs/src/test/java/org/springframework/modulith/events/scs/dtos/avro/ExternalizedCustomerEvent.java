/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.springframework.modulith.events.scs.dtos.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.springframework.modulith.events.Externalized;

@Externalized("customers-avro-externalized-out-0::#{#this.getId()}")
@org.apache.avro.specific.AvroGenerated
public class ExternalizedCustomerEvent extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {

    private static final long serialVersionUID = -8546638608361810155L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
            "{\"type\":\"record\",\"name\":\"ExternalizedCustomerEvent\",\"namespace\":\"io.zenwave360.modulith.events.scs.dtos.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Customer name\"},{\"name\":\"email\",\"type\":\"string\",\"doc\":\"\"},{\"name\":\"addresses\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"street\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"}]},\"java-class\":\"java.util.List\"}},{\"name\":\"id\",\"type\":[\"null\",\"long\"]},{\"name\":\"version\",\"type\":[\"null\",\"int\"]},{\"name\":\"paymentMethods\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PaymentMethod\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentMethodType\",\"symbols\":[\"VISA\",\"MASTERCARD\"]}},{\"name\":\"cardNumber\",\"type\":\"string\"}]},\"java-class\":\"java.util.List\"}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<ExternalizedCustomerEvent> ENCODER = new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<ExternalizedCustomerEvent> DECODER = new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<ExternalizedCustomerEvent> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<ExternalizedCustomerEvent> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified
     * {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given
     * SchemaStore
     */
    public static BinaryMessageDecoder<ExternalizedCustomerEvent> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this CustomerEvent to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a CustomerEvent from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a CustomerEvent instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an
     * instance of this class
     */
    public static ExternalizedCustomerEvent fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** Customer name */
    private CharSequence name;

    private CharSequence email;

    private java.util.List<Address> addresses;

    private Long id;

    private Integer version;

    private java.util.List<PaymentMethod> paymentMethods;

    /**
     * Default constructor. Note that this does not initialize fields to their default
     * values from the schema. If that is desired then one should use
     * <code>newBuilder()</code>.
     */
    public ExternalizedCustomerEvent() {
    }

    /**
     * All-args constructor.
     * @param name Customer name
     * @param email The new value for email
     * @param addresses The new value for addresses
     * @param id The new value for id
     * @param version The new value for version
     * @param paymentMethods The new value for paymentMethods
     */
    public ExternalizedCustomerEvent(CharSequence name, CharSequence email,
            java.util.List<Address> addresses, Long id, Integer version,
            java.util.List<PaymentMethod> paymentMethods) {
        this.name = name;
        this.email = email;
        this.addresses = addresses;
        this.id = id;
        this.version = version;
        this.paymentMethods = paymentMethods;
    }

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return name;
            case 1:
                return email;
            case 2:
                return addresses;
            case 3:
                return id;
            case 4:
                return version;
            case 5:
                return paymentMethods;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                name = (CharSequence) value$;
                break;
            case 1:
                email = (CharSequence) value$;
                break;
            case 2:
                addresses = (java.util.List<Address>) value$;
                break;
            case 3:
                id = (Long) value$;
                break;
            case 4:
                version = (Integer) value$;
                break;
            case 5:
                paymentMethods = (java.util.List<PaymentMethod>) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'name' field.
     * @return Customer name
     */
    public CharSequence getName() {
        return name;
    }

    /**
     * Sets the value of the 'name' field. Customer name
     * @param value the value to set.
     */
    public void setName(CharSequence value) {
        this.name = value;
    }

    /**
     * Gets the value of the 'email' field.
     * @return The value of the 'email' field.
     */
    public CharSequence getEmail() {
        return email;
    }

    /**
     * Sets the value of the 'email' field.
     * @param value the value to set.
     */
    public void setEmail(CharSequence value) {
        this.email = value;
    }

    /**
     * Gets the value of the 'addresses' field.
     * @return The value of the 'addresses' field.
     */
    public java.util.List<Address> getAddresses() {
        return addresses;
    }

    /**
     * Sets the value of the 'addresses' field.
     * @param value the value to set.
     */
    public void setAddresses(java.util.List<Address> value) {
        this.addresses = value;
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(Long value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'version' field.
     * @return The value of the 'version' field.
     */
    public Integer getVersion() {
        return version;
    }

    /**
     * Sets the value of the 'version' field.
     * @param value the value to set.
     */
    public void setVersion(Integer value) {
        this.version = value;
    }

    /**
     * Gets the value of the 'paymentMethods' field.
     * @return The value of the 'paymentMethods' field.
     */
    public java.util.List<PaymentMethod> getPaymentMethods() {
        return paymentMethods;
    }

    /**
     * Sets the value of the 'paymentMethods' field.
     * @param value the value to set.
     */
    public void setPaymentMethods(java.util.List<PaymentMethod> value) {
        this.paymentMethods = value;
    }

    /**
     * Creates a new CustomerEvent RecordBuilder.
     * @return A new CustomerEvent RecordBuilder
     */
    public static ExternalizedCustomerEvent.Builder newBuilder() {
        return new ExternalizedCustomerEvent.Builder();
    }

    /**
     * Creates a new CustomerEvent RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new CustomerEvent RecordBuilder
     */
    public static ExternalizedCustomerEvent.Builder newBuilder(
            ExternalizedCustomerEvent.Builder other) {
        if (other == null) {
            return new ExternalizedCustomerEvent.Builder();
        }
        else {
            return new ExternalizedCustomerEvent.Builder(other);
        }
    }

    /**
     * Creates a new CustomerEvent RecordBuilder by copying an existing CustomerEvent
     * instance.
     * @param other The existing instance to copy.
     * @return A new CustomerEvent RecordBuilder
     */
    public static ExternalizedCustomerEvent.Builder newBuilder(
            ExternalizedCustomerEvent other) {
        if (other == null) {
            return new ExternalizedCustomerEvent.Builder();
        }
        else {
            return new ExternalizedCustomerEvent.Builder(other);
        }
    }

    /**
     * RecordBuilder for CustomerEvent instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ExternalizedCustomerEvent>
            implements org.apache.avro.data.RecordBuilder<ExternalizedCustomerEvent> {

        /** Customer name */
        private CharSequence name;

        private CharSequence email;

        private java.util.List<Address> addresses;

        private Long id;

        private Integer version;

        private java.util.List<PaymentMethod> paymentMethods;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(ExternalizedCustomerEvent.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.name)) {
                this.name = data().deepCopy(fields()[0].schema(), other.name);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.email)) {
                this.email = data().deepCopy(fields()[1].schema(), other.email);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.addresses)) {
                this.addresses = data().deepCopy(fields()[2].schema(), other.addresses);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.id)) {
                this.id = data().deepCopy(fields()[3].schema(), other.id);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.version)) {
                this.version = data().deepCopy(fields()[4].schema(), other.version);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.paymentMethods)) {
                this.paymentMethods = data().deepCopy(fields()[5].schema(), other.paymentMethods);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
        }

        /**
         * Creates a Builder by copying an existing CustomerEvent instance
         * @param other The existing instance to copy.
         */
        private Builder(ExternalizedCustomerEvent other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.name)) {
                this.name = data().deepCopy(fields()[0].schema(), other.name);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.email)) {
                this.email = data().deepCopy(fields()[1].schema(), other.email);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.addresses)) {
                this.addresses = data().deepCopy(fields()[2].schema(), other.addresses);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.id)) {
                this.id = data().deepCopy(fields()[3].schema(), other.id);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.version)) {
                this.version = data().deepCopy(fields()[4].schema(), other.version);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.paymentMethods)) {
                this.paymentMethods = data().deepCopy(fields()[5].schema(), other.paymentMethods);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Gets the value of the 'name' field. Customer name
         * @return The value.
         */
        public CharSequence getName() {
            return name;
        }

        /**
         * Sets the value of the 'name' field. Customer name
         * @param value The value of 'name'.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder setName(CharSequence value) {
            validate(fields()[0], value);
            this.name = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'name' field has been set. Customer name
         * @return True if the 'name' field has been set, false otherwise.
         */
        public boolean hasName() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'name' field. Customer name
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder clearName() {
            name = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'email' field.
         * @return The value.
         */
        public CharSequence getEmail() {
            return email;
        }

        /**
         * Sets the value of the 'email' field.
         * @param value The value of 'email'.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder setEmail(CharSequence value) {
            validate(fields()[1], value);
            this.email = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'email' field has been set.
         * @return True if the 'email' field has been set, false otherwise.
         */
        public boolean hasEmail() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'email' field.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder clearEmail() {
            email = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'addresses' field.
         * @return The value.
         */
        public java.util.List<Address> getAddresses() {
            return addresses;
        }

        /**
         * Sets the value of the 'addresses' field.
         * @param value The value of 'addresses'.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder setAddresses(
                java.util.List<Address> value) {
            validate(fields()[2], value);
            this.addresses = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'addresses' field has been set.
         * @return True if the 'addresses' field has been set, false otherwise.
         */
        public boolean hasAddresses() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'addresses' field.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder clearAddresses() {
            addresses = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public Long getId() {
            return id;
        }

        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder setId(Long value) {
            validate(fields()[3], value);
            this.id = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder clearId() {
            id = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'version' field.
         * @return The value.
         */
        public Integer getVersion() {
            return version;
        }

        /**
         * Sets the value of the 'version' field.
         * @param value The value of 'version'.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder setVersion(Integer value) {
            validate(fields()[4], value);
            this.version = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'version' field has been set.
         * @return True if the 'version' field has been set, false otherwise.
         */
        public boolean hasVersion() {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'version' field.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder clearVersion() {
            version = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'paymentMethods' field.
         * @return The value.
         */
        public java.util.List<PaymentMethod> getPaymentMethods() {
            return paymentMethods;
        }

        /**
         * Sets the value of the 'paymentMethods' field.
         * @param value The value of 'paymentMethods'.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder setPaymentMethods(
                java.util.List<PaymentMethod> value) {
            validate(fields()[5], value);
            this.paymentMethods = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'paymentMethods' field has been set.
         * @return True if the 'paymentMethods' field has been set, false otherwise.
         */
        public boolean hasPaymentMethods() {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'paymentMethods' field.
         * @return This builder.
         */
        public ExternalizedCustomerEvent.Builder clearPaymentMethods() {
            paymentMethods = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public ExternalizedCustomerEvent build() {
            try {
                ExternalizedCustomerEvent record = new ExternalizedCustomerEvent();
                record.name = fieldSetFlags()[0] ? this.name : (CharSequence) defaultValue(fields()[0]);
                record.email = fieldSetFlags()[1] ? this.email : (CharSequence) defaultValue(fields()[1]);
                record.addresses = fieldSetFlags()[2] ? this.addresses
                        : (java.util.List<Address>) defaultValue(
                        fields()[2]);
                record.id = fieldSetFlags()[3] ? this.id : (Long) defaultValue(fields()[3]);
                record.version = fieldSetFlags()[4] ? this.version : (Integer) defaultValue(fields()[4]);
                record.paymentMethods = fieldSetFlags()[5] ? this.paymentMethods
                        : (java.util.List<PaymentMethod>) defaultValue(
                        fields()[5]);
                return record;
            }
            catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            }
            catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }

    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<ExternalizedCustomerEvent> WRITER$ = (org.apache.avro.io.DatumWriter<ExternalizedCustomerEvent>) MODEL$
            .createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<ExternalizedCustomerEvent> READER$ = (org.apache.avro.io.DatumReader<ExternalizedCustomerEvent>) MODEL$
            .createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
        out.writeString(this.name);

        out.writeString(this.email);

        long size0 = this.addresses.size();
        out.writeArrayStart();
        out.setItemCount(size0);
        long actualSize0 = 0;
        for (Address e0 : this.addresses) {
            actualSize0++;
            out.startItem();
            e0.customEncode(out);
        }
        out.writeArrayEnd();
        if (actualSize0 != size0)
            throw new java.util.ConcurrentModificationException(
                    "Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

        if (this.id == null) {
            out.writeIndex(0);
            out.writeNull();
        }
        else {
            out.writeIndex(1);
            out.writeLong(this.id);
        }

        if (this.version == null) {
            out.writeIndex(0);
            out.writeNull();
        }
        else {
            out.writeIndex(1);
            out.writeInt(this.version);
        }

        long size1 = this.paymentMethods.size();
        out.writeArrayStart();
        out.setItemCount(size1);
        long actualSize1 = 0;
        for (PaymentMethod e1 : this.paymentMethods) {
            actualSize1++;
            out.startItem();
            e1.customEncode(out);
        }
        out.writeArrayEnd();
        if (actualSize1 != size1)
            throw new java.util.ConcurrentModificationException(
                    "Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.name = in.readString(this.name instanceof Utf8 ? (Utf8) this.name : null);

            this.email = in.readString(this.email instanceof Utf8 ? (Utf8) this.email : null);

            long size0 = in.readArrayStart();
            java.util.List<Address> a0 = this.addresses;
            if (a0 == null) {
                a0 = new SpecificData.Array<Address>((int) size0,
                        SCHEMA$.getField("addresses").schema());
                this.addresses = a0;
            }
            else
                a0.clear();
            SpecificData.Array<Address> ga0 = (a0 instanceof SpecificData.Array
                    ? (SpecificData.Array<Address>) a0 : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
                for (; size0 != 0; size0--) {
                    Address e0 = (ga0 != null ? ga0.peek() : null);
                    if (e0 == null) {
                        e0 = new Address();
                    }
                    e0.customDecode(in);
                    a0.add(e0);
                }
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.id = null;
            }
            else {
                this.id = in.readLong();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.version = null;
            }
            else {
                this.version = in.readInt();
            }

            long size1 = in.readArrayStart();
            java.util.List<PaymentMethod> a1 = this.paymentMethods;
            if (a1 == null) {
                a1 = new SpecificData.Array<PaymentMethod>((int) size1,
                        SCHEMA$.getField("paymentMethods").schema());
                this.paymentMethods = a1;
            }
            else
                a1.clear();
            SpecificData.Array<PaymentMethod> ga1 = (a1 instanceof SpecificData.Array
                    ? (SpecificData.Array<PaymentMethod>) a1 : null);
            for (; 0 < size1; size1 = in.arrayNext()) {
                for (; size1 != 0; size1--) {
                    PaymentMethod e1 = (ga1 != null ? ga1.peek() : null);
                    if (e1 == null) {
                        e1 = new PaymentMethod();
                    }
                    e1.customDecode(in);
                    a1.add(e1);
                }
            }

        }
        else {
            for (int i = 0; i < 6; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.name = in.readString(this.name instanceof Utf8 ? (Utf8) this.name : null);
                        break;

                    case 1:
                        this.email = in.readString(this.email instanceof Utf8 ? (Utf8) this.email : null);
                        break;

                    case 2:
                        long size0 = in.readArrayStart();
                        java.util.List<Address> a0 = this.addresses;
                        if (a0 == null) {
                            a0 = new SpecificData.Array<Address>(
                                    (int) size0, SCHEMA$.getField("addresses").schema());
                            this.addresses = a0;
                        }
                        else
                            a0.clear();
                        SpecificData.Array<Address> ga0 = (a0 instanceof SpecificData.Array
                                ? (SpecificData.Array<Address>) a0 : null);
                        for (; 0 < size0; size0 = in.arrayNext()) {
                            for (; size0 != 0; size0--) {
                                Address e0 = (ga0 != null ? ga0.peek()
                                        : null);
                                if (e0 == null) {
                                    e0 = new Address();
                                }
                                e0.customDecode(in);
                                a0.add(e0);
                            }
                        }
                        break;

                    case 3:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.id = null;
                        }
                        else {
                            this.id = in.readLong();
                        }
                        break;

                    case 4:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.version = null;
                        }
                        else {
                            this.version = in.readInt();
                        }
                        break;

                    case 5:
                        long size1 = in.readArrayStart();
                        java.util.List<PaymentMethod> a1 = this.paymentMethods;
                        if (a1 == null) {
                            a1 = new SpecificData.Array<PaymentMethod>(
                                    (int) size1, SCHEMA$.getField("paymentMethods").schema());
                            this.paymentMethods = a1;
                        }
                        else
                            a1.clear();
                        SpecificData.Array<PaymentMethod> ga1 = (a1 instanceof SpecificData.Array
                                ? (SpecificData.Array<PaymentMethod>) a1
                                : null);
                        for (; 0 < size1; size1 = in.arrayNext()) {
                            for (; size1 != 0; size1--) {
                                PaymentMethod e1 = (ga1 != null ? ga1.peek()
                                        : null);
                                if (e1 == null) {
                                    e1 = new PaymentMethod();
                                }
                                e1.customDecode(in);
                                a1.add(e1);
                            }
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

}
